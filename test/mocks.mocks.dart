// Mocks generated by Mockito 5.4.5 from annotations
// in shelfaware_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shelfaware_app/repositories/favourites_repository.dart' as _i6;
import 'package:shelfaware_app/services/auth_services.dart' as _i7;
import 'package:shelfaware_app/services/food_item_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_1 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoodItemService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodItemService extends _i1.Mock implements _i4.FoodItemService {
  MockFoodItemService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveFoodItem({
    required String? productName,
    required DateTime? expiryDate,
    required int? quantity,
    required String? storageLocation,
    required String? notes,
    required String? category,
    required String? productImage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFoodItem,
          [],
          {
            #productName: productName,
            #expiryDate: expiryDate,
            #quantity: quantity,
            #storageLocation: storageLocation,
            #notes: notes,
            #category: category,
            #productImage: productImage,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i2.DocumentSnapshot<Object?>>> getUserFoodItems(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFoodItems,
          [userId],
        ),
        returnValue: _i5.Stream<List<_i2.DocumentSnapshot<Object?>>>.empty(),
      ) as _i5.Stream<List<_i2.DocumentSnapshot<Object?>>>);

  @override
  _i5.Future<Map<String, dynamic>?> fetchFoodItemById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFoodItemById,
          [id],
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);

  @override
  _i5.Future<List<String>> fetchFoodCategories() => (super.noSuchMethod(
        Invocation.method(
          #fetchFoodCategories,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);
}

/// A class which mocks [FavouritesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavouritesRepository extends _i1.Mock
    implements _i6.FavouritesRepository {
  MockFavouritesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i3.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i3.FirebaseAuth);

  @override
  _i5.Future<bool> isFavourite(String? recipeId) => (super.noSuchMethod(
        Invocation.method(
          #isFavourite,
          [recipeId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> addFavourite(Map<String, dynamic>? recipeData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavourite,
          [recipeData],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeFavourite(String? recipeId) => (super.noSuchMethod(
        Invocation.method(
          #removeFavourite,
          [recipeId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i7.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i3.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i5.Stream<_i3.User?>.empty(),
      ) as _i5.Stream<_i3.User?>);

  signInWithEmailAndPassword(String email, String password) {}
}
